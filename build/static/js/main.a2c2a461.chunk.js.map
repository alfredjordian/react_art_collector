{"version":3,"sources":["api/index.js","components/Feature.js","components/Loading.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","props","searchTerm","searchValue","setIsLoading","setSearchResults","className","href","onClick","event","preventDefault","result","console","error","Feature","featuredResult","id","title","dated","images","primaryimageurl","description","culture","style","technique","medium","dimensions","people","department","division","contact","creditline","helper","content","searchable","toLowerCase","displayImage","length","primaryImage","map","person","index","key","displayname","image","src","baseimageurl","alt","Loading","Preview","setFeaturedResult","searchResults","info","fetchPage","pageUrl","results","log","previousButton","prev","nextButton","next","disabled","record","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","centuries","classifications","onSubmit","htmlFor","type","placeholder","onChange","target","name","Title","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a2c2a461.chunk.js","sourcesContent":["/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=6b4532ee-c0ec-4add-a1a3-bda19287bc98';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() { /////// when i pass centuries into the fetch centuries function on line 42 ./search.js is it using that list as an argument?\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import React, { Fragment } from 'react';\n\n// Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from '../api';\n\n/**\n * We need a new component called Searchable which:\n * \n * Has a template like this:\n * \n * <span className=\"content\">\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n * </span>\n *\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n * \n * When someone clicks the anchor tag, you should:\n * \n * - preventDefault on the event\n * - call setIsLoading, set it to true\n * \n * Then start a try/catch/finally block:\n * \n * try:\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n *  - send the result to setSearchResults (which will update the Preview component)\n * catch: \n *  - console.error the error\n * finally:\n *  - call setIsLoading, set it to false\n */\nconst Searchable = (props) => {\n  const {searchTerm, searchValue, setIsLoading, setSearchResults} = props;\n  \n  \n  return <span className=\"content\">\n   <a href=\"#\" onClick={async (event) => {\n       event.preventDefault()\n       setIsLoading(true)\n       try {\n          const result = await fetchQueryResultsFromTermAndValue(searchTerm, searchValue)\n            setSearchResults(result)\n       } catch (error) {\n           console.error(error)\n       } finally {\n            setIsLoading(false)\n       }\n       \n   }}>{searchValue}</a>\n  </span>\n}\n\n/**\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\n * \n * <main id=\"feature\"></main>\n * \n * And like this when one is:\n * \n * <main id=\"feature\">\n *   <div className=\"object-feature\">\n *     <header>\n *       <h3>OBJECT TITLE</h3>\n *       <h4>WHEN IT IS DATED</h4>\n *     </header>\n *     <section className=\"facts\">\n *       <span className=\"title\">FACT NAME</span>\n *       <span className=\"content\">FACT VALUE</span>\n *       <span className=\"title\">NEXT FACT NAME</span>\n *       <span className=\"content\">NEXT FACT VALUE</span>\n *     </section>\n *     <section className=\"photos\">\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n *     </section>\n *   </div>\n * </main>\n * \n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style, \n * technique, medium, dimensions, people, department, division, contact, creditline\n * \n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n * \n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n * \n * This component should be exported as default.\n */\nconst Feature = (props) => {\n    const {featuredResult, setIsLoading, setSearchResults} = props // where is featured result? is it part of the json?\n    \n    if(!featuredResult) {\n        return <main id=\"feature\"></main>\n    }\n\n    const {title, dated, images, primaryimageurl, description, culture,\n        style, technique, medium, dimensions, people, department, division, contact, creditline} = featuredResult\n\nconst helper = (title, content, searchable) => {\n        if (!content) {\n            return\n        }\n        return (<>\n        <span className='title'>{title}</span>\n        {searchable ? <Searchable searchTerm={title.toLowerCase()} searchValue={content} setIsLoading={setIsLoading} setSearchResults={setSearchResults}/> : <span className='content'>{content}</span>}\n        </>)\n    }\n\n    const displayImage = images && images.length > 0\n    const primaryImage = !images && primaryimageurl\n\n    return (\n\n         <main id=\"feature\">\n           <div className=\"object-feature\">\n             <header>\n               <h3>{title}</h3>\n               <h4>{dated}</h4>\n             </header>\n             <section className=\"facts\">\n              {helper('Descirption' , description, false)}\n              {helper('Culture' , culture, true)}\n              {helper('Style' , style, false)}\n              {helper('Technique', technique, true)}\n              {helper('Medium', medium ? medium.toLowerCase : null, true)}\n              {helper('Dimensions', dimensions, false)}\n\n              {\n                  people ? people.map((person, index) => {\n                      return(<Fragment key={index}>{\n                          helper('Person', person.displayname, true)\n                      }</Fragment>)\n                  }) : \"\"\n              }\n              \n              {helper('Department' , department, false)}\n                {helper('Division' , division, false)}\n                {helper('Contact', contact, false)}\n                {helper('Creditline' , creditline, false)}\n\n             </section>\n             <section className=\"photos\">\n               {\n                   displayImage ? images.map((image, index) => {\n                       return <img key = {index} src = {image.baseimageurl} alt = 'No images'/>\n                   }) : \"\"\n               }\n\n               {\n                   primaryImage ? <img src = {primaryimageurl} alt = 'No images' /> : \"\"\n               }\n             </section>\n           </div>\n         </main>\n    )\n\n\n}\n\nexport default Feature;","import React from 'react';\n\n/**\n * Create and export a component called Loading which uses this static HTML template:\n * \n * <div id=\"loading\">\n *   <h2 className=\"message\">Searching...</h2>\n * </div>\n */\n\n function Loading () {\nreturn <div id=\"loading\">\n    <h2 className=\"message\">Searching...</h2>\n </div>\n\n }\n\n export default Loading;","import React from 'react';\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from '../api';\n\nconst Preview = (props) => {\n  const {setSearchResults, setFeaturedResult, setIsLoading} = props\n  const {info, records} = props.searchResults\n  /**\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   * \n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\n\n  /**\n   * Don't touch this function, it's good to go.\n   * \n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n      console.log(info)\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  const previousButton = info && info.prev\n  const nextButton = info && info.next\n\n  return <aside id=\"preview\">\n    <header className=\"pagination\">\n      {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\n      <button \n        disabled={ previousButton ? false : true } \n        className=\"previous\"\n        onClick={()=> {fetchPage(info.prev)}}>Previous</button>\n\n      {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\n      <button\n        disabled={ nextButton ? false : true}\n        className=\"next\"\n        onClick={()=> {fetchPage(info.next)}}>Next</button>\n    </header>\n    <section className=\"results\">\n      {\n        /* Here we should map over the records, and render something like this for each one:\n          <div  \n            key={ index }\n            className=\"object-preview\"\n            onClick={(event) => {\n              // prevent the default\n              // set the featured result to be this record, using setFeaturedResult\n            }}>\n            { \n              // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing \n            }\n            {\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n            }\n          </div>\n        */\n      }\n        {\n       records ? records.map((record, index) => {\n         return <div\n            key={ index }\n            className=\"object-preview\"\n            onClick={(event) => {\n              event.preventDefault()\n              setFeaturedResult(record)\n              // prevent the default\n              // set the featured result to be this record, using setFeaturedResult\n            }}>\n            {\n               record.primaryimageurl ?  <img src={ record.primaryimageurl } alt={ record.description } /> : \"\"\n            }\n\n            {\n              record.title ? <h3>{record.info}</h3> : <h3>MISSING INFO</h3>\n            }\n          </div>\n        }) : \"\"\n        }\n      \n    </section>\n  </aside>\n}\n\nexport default Preview;","import React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport { \n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults\n} from '../api';\n\nconst Search = (props) => {\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n const {setIsLoading, setSearchResults} = props;\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\n   * our controlled inputs:\n   * \n   * centuryList, setCenturyList (default should be an empty array, [])\n   * classificationList, setClassificationList (default should be an empty array, [])\n   * queryString, setQueryString (default should be an empty string, '')\n   * century, setCentury (default should be the string 'any')\n   * classification, setClassification (default should be the string 'any')\n   */\n  const [centuryList, setCenturyList] = useState([]);\n  const [classificationList, setClassificationList] = useState([]);\n  const [queryString, setQueryString] = useState('');\n  const [century, setCentury] = useState('any');\n  const [classification, setClassification] = useState('any');\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   * \n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   * \n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {\n    Promise.all([fetchAllCenturies(), fetchAllClassifications()])\n      .then(([centuries, classifications]) => {setCenturyList(centuries); setClassificationList(classifications); console.log(classifications);})\n    }, []);\n\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   * \n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   * \n   * then, in a try/catch/finally block:\n   * \n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * - pass them to setSearchResults\n   * \n   * catch: error to console.error\n   * \n   * finally: call setIsLoading, set it to false\n   */\n\n  \n  return <form id=\"search\" onSubmit={async (event) => {\n    // write code here\n    event.preventDefault()\n    setIsLoading(true); // what exactly is setIsLoading in the useState? I get it's set to false originally, when it is set to true is it initializing everything?\n    try{\n      const results = await fetchQueryResults({ century, classification, queryString })\n      setSearchResults(results)\n    \n    } catch (error) {\n      console.error(error)\n    \n    } finally {\n      setIsLoading(false)\n\n    }\n  \n  }}>\n    <fieldset>\n      <label htmlFor=\"keywords\">Query</label>\n      <input \n        id=\"keywords\" \n        type=\"text\" \n        placeholder=\"enter keywords...\" \n        value={queryString} \n        onChange={(event) => {\n          setQueryString(event.target.value)\n        }}/>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({ classificationList.length })</span></label>\n      <select \n        name=\"classification\"\n        id=\"select-classification\"\n        value={classification} \n        onChange={(event) => {\n          setClassification(event.target.value)\n        }}>\n        \n        <option value=\"any\">Any</option>\n        {\n        classificationList.map((classification, index) => <option key = {`classification-${index}`} value = {classification.name}> {classification.name} </option>)\n        }\n\n        {/* map over the classificationList, return an <option /> */}\n      </select>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({ centuryList.length })</span></label>\n      <select \n        name=\"century\" \n        id=\"select-century\"\n        value={century} \n        onChange={(event) =>{\n          setCentury(event.target.value)\n        }}>\n        <option value=\"any\">Any</option>\n        {\n        centuryList.map((century, index) => <option key = {`century-${index}`} value = {century.name}> {century.name} </option>)\n        }\n        {/* map over the centuryList, return an <option /> */}\n      </select>\n     </fieldset>\n    <button>SEARCH</button>\n  </form>\n}\n\nexport default Search;","import React from 'react';\n \n/**\n * Create/export a component called Title which uses this static HTML as the template:\n * \n * <div id=\"title\">\n *   <h1>\n *     The Art Collector\n *   </h1>\n *   <h5>\n *     Search the Harvard Art Museums' Private Collections\n *   </h5>\n * </div>\n */\n\nfunction Title () {\nreturn <div id=\"title\">\n   <h1>\n     The Art Collector\n   </h1>\n   <h5>\n     Search the Harvard Art Museums' Private Collections\n   </h5>\n </div>\n}\n\nexport default Title;           // where is this being exported if the directories arent being specified, './' <---","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// These imports won't work until you fix ./components/index.js\nimport {\n  Feature,\n  Loading,\n  Preview,\n  Search,\n  Title\n} from './components';\n\nconst App = () => {\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   * \n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n  const [searchResults, setSearchResults] = useState({ info: {}, records: [] });\n  const [featuredResult, setFeaturedResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);      /// whenever usestate is set to true is it initalized on the search component?\n  \n\n  return <div className=\"app\">\n    {/* <Title /> is static, doesn't need any props */}\n    <Title />\n    {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n    {<Search \n    setIsLoading = {setIsLoading}\n    setSearchResults = {setSearchResults}\n    />}\n    {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n    <Preview searchResults={searchResults} setIsLoading={setIsLoading} setSearchResults={setSearchResults} setFeaturedResult={setFeaturedResult}/>\n    {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n    <Feature \n    featuredResult = {featuredResult}\n    setIsLoading = {setIsLoading}\n    setSearchResults = {setSearchResults}\n    />\n    {/* <Loading /> is static, but should only render when isLoading is true */}\n    {isLoading ? <Loading /> : null} {/* use a ternary and render null if isLoading is false*/}\n  </div>\n}\n\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */\n\nReactDOM.render(\n<App />,\ndocument.getElementById('app')\n)\n\n"],"sourceRoot":""}